{"version":3,"sources":["Model.ts","components/Help.tsx","utils/formatters.ts","set/V2Enums.ts","components/ExpenseForm.tsx","RucAPI.ts","set/DigitGenerator.ts","set/SETService.ts","utils/Hooks.ts","set/SETListManipulatorService.ts","pages/ExpenseListPage.tsx","components/IncomeForm.tsx","pages/IncomeListPage.tsx","components/Informer.tsx","set/SETExporter.ts","pages/Exporter.tsx","import_parsers/ClipboardParser.ts","pages/ClipboardImporter.tsx","misco.ts","set/VersionMigrator.ts","pages/Dashboard.tsx","set/SETImporter.tsx","pages/Onboarding.tsx","pages/MainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NRHelper","noRequested","state","fetching","loaded","data","error","or","nr","def","map","mapper","NRWrapper","of","unwrap","base","this","op","toRet","mapped","Help","props","gutter","span","message","description","onClick","onNewInvoice","type","showIcon","icon","AlertTwoTone","WarningTwoTone","twoToneColor","href","formatMoney","value","symbol","decimalDigits","startsWith","amount","Math","round","formattedAmount","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","prefix","undefined","parseMoney","Number","trim","replace","IncomeType","salary","summary","other","ExpenseDocumentType","invoice","voucher","simpleVoucher","selfInvoice","publicEventTicket","publicTransportTicket","publicIncomeTicket","airTicket","cashierMachineTicket","debitNote","ips","cardSummary","transfer","externalTicket","importTicket","PaymentType","cash","credit","na","ExpenseForm","expense","owner","onNewRuc","onSubmit","onCancel","editType","finalOwner","orElse","doc","name","div","useState","rucQuery","setRucQuery","Form","useForm","form","refDate","useRef","refQuery","useEffect","setFieldsValue","current","setValue","newLetterHead","o","letterhead","setFields","keyMap","SAVE_EXPENSE","handlers","submit","style","padding","layout","onFinish","date","expenseNumber","isCredit","focus","wrapperCol","Item","label","rules","required","mask","ref","autoFocus","placeholder","defaultValue","options","getAvailableTypes","showSearch","onKeyDown","evt","key","onBlur","target","onChange","shouldUpdate","prevValues","curValues","getFieldValue","Group","Button","width","formatter","parser","hidden","JSON","stringify","htmlType","types","Object","keys","k","query","searchTerm","final","fetch","then","result","json","DigitGenerator","ruc","getDigitoVerificador","total","valueOfZero","charCodeAt","alRevez","invertirCadena","eliminarNoDigitos","i","length","resto","cadena","split","reverse","join","isNaN","parseInt","SETService","period","invoices","incomes","lastInvoiceId","lastIncomeId","reduce","pv","cv","id","source","identifier","getDigitoVerificadorBase11","old","storageToFormDate","paymentType","incomeNumber","dateToStorageFormat","irpAmount","identifierType","version","findLast","f","QueryRuc","fromApi","found","find","moment","Error","month","mapMomentToSETFormat","year","mapLocalToMoment","useDebounce","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","SPECIAL_KEYS","SETListManipulatorService","from","to","toSearch","typeToSearch","getTypeToSearch","fullText","cleanSearch","console","log","filter","tf","valid","toLowerCase","includes","inSpanish","isBetween","idx","indexOf","substring","cleaned","toClean","emptyOwner","defaultExpense","ExpenseListPage","setCurrent","currentId","setCurrentId","service","useMemo","setQuery","debouncedQuery","startOf","endOf","setDate","setData","onNewExpense","parse","filterExpenses","ADD_INVOICE","align","textAlign","fontWeight","offset","t","RangePicker","allowClear","ranges","Date","getFullYear","subtract","values","InvoiceTable","onRemove","r","doRemove","onEdit","d","mapToForm","border","InvoiceEditor","onSave","wasNew","info","setOwner","toEdit","useCallback","findRuc","catch","e","ev","dataSource","size","pagination","pageSize","showTotal","rowKey","columns","title","dataIndex","defaultSortOrder","sorter","a","b","render","_","row","localeCompare","sum","sumBy","colSpan","className","Text","IncomeForm","income","SAVE_Income","defaultIncome","IncomeListPage","onNewIncome","filterIncomes","IncomeTable","mapIngresoToForm","IncomeEditor","pageData","Informer","column","informer","SETExporter","nameFormat","fixed","fixDataTypes","now","identificacion","periodo","pType","tipoPresentacion","informante","download","Blob","userInfo","ingresos","forEach","ingresoMontoGravado","ingresoMontoNoGravado","ingresoMontoTotal","fecha","mapSETFormatToMoment","tipo","mes","mapSETFormatToSetMonth","timbradoDocumento","timbradoCondicion","timbradoNumero","egresos","egresoMontoTotal","tipoEgreso","subtipoEgreso","toDownload","Array","isArray","Set","add","csv","Papa","unparse","fields","alert","Exporter","useLocalStorage","expenses","verticalAlign","downloadAll","downloadExcel","parseClipboard","text","letterHeadMatches","exec","rucMatches","totalMatches","dateMatches","conditionMatches","identifierMatches","condition","extractConditionType","muvParser","ClipboardImporter","parsed","setParsed","raw","setRaw","onNewParsed","vm","user","migrateUser","migrateExpense","migrateIncome","param","p","needsMigration","nombre","older","v1","mapDateFromSetFormat","relacionadoNumeroIdentificacion","relacionadoNombres","tipoIngreso","Dashboard","setInformer","clearInformer","setIncomes","clearIncomes","setExpenses","clearExpenses","migration","setMigration","anyNeedsMigration","lInformer","lIncomes","lExpenses","isMigrating","saveExpense","it","mapInvoice","removeExpense","saveIncome","mapIncome","removeIncome","clearAllData","searchRuc","async","useMiscoState","clipboardImporter","setClipboardImporter","showExporter","setShowExporter","ghost","subTitle","extra","Modal","warning","content","cancelText","okCancel","okText","okType","onOk","footer","defaultActiveKey","TabPane","tab","onClose","visible","bodyStyle","paddingBottom","marginRight","ClipboardImporterModal","okButtonProps","disabled","SETImporter","dat","writeStorage","fixIncomes","familiares","ingreso","newFecha","fromScratch","Onboarding","modalVisible","setModalVisible","margin","beforeUpload","file","Promise","resolve","reader","FileReader","readAsText","onload","doImport","doProcess","UploadOutlined","FromScratchModal","onAccept","addVerifier","document","working","setWorking","loading","validateFields","toUpperCase","resetFields","success","warn","finally","labelCol","initialValues","MainPage","configure","logLevel","App","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc024e18.chunk.js","sourcesContent":["\nexport type Async<T, E = NetworkError> = {\n    state: 'NO_REQUESTED'\n} | {\n    state: 'FETCHING'\n} | {\n    state: 'LOADED',\n    data: T\n} | {\n    state: 'ERROR',\n    error: E\n}\n\nexport const NRHelper = {\n    noRequested: () => ({state: 'NO_REQUESTED' as const}),\n    fetching: () => ({state: 'FETCHING' as const}),\n    loaded: <T>(data: T) => ({state: 'LOADED' as const, data}),\n    error: <E>(error: E) => ({state: 'ERROR' as const, error}),\n\n    or: function <T, E>(nr: Async<T, E>, def: T) {\n        if (nr.state === 'LOADED') return nr.data;\n        return def;\n    },\n\n    map: function <T, E, K>(nr: Async<T, E>, mapper: (toMap: T) => K): Async<K, E> {\n        return NRWrapper.of(nr).map(mapper).unwrap();\n    }\n};\n\nexport class NRWrapper<T, E> {\n\n    static of<T, E>(base: Async<T, E>) {\n        return new NRWrapper(base);\n    }\n\n    constructor(private nr: Async<T, E>) {\n    }\n\n    orElse(def: T): T {\n        if (this.nr.state === 'LOADED') return this.nr.data || def;\n        return def;\n    }\n\n    map<K>(op: (toMap: T) => K): NRWrapper<K, E> {\n        let toRet: Async<K, E>;\n        switch (this.nr.state) {\n            case 'ERROR':\n                toRet = NRHelper.error(this.nr.error);\n                break;\n            case 'FETCHING':\n                toRet = NRHelper.fetching();\n                break;\n            case 'LOADED':\n                const mapped: K = op(this.nr.data);\n                toRet = NRHelper.loaded<K>(mapped);\n                break;\n            case 'NO_REQUESTED':\n            default:\n                toRet = NRHelper.noRequested();\n                break;\n\n        }\n        return new NRWrapper<K, E>(toRet);\n    }\n\n    unwrap(): Async<T, E> {\n        return this.nr;\n    }\n}\n\nexport interface NetworkError {\n    code: number;\n}\n","import React from 'react';\nimport {AlertTwoTone, WarningTwoTone} from '@ant-design/icons'\nimport {Alert, Col, Row} from 'antd';\n\n\nexport function Help(props: {\n    onNewInvoice: () => void;\n    type: 'income' | 'invoice'\n}) {\n    return <Row gutter={[8, 8]}>\n        <Col span={24}>\n            <Alert\n                message=\"Tip\"\n                description={<div onClick={props.onNewInvoice}>\n                    Puedes presionar aquí para agregar\n                    <br/>\n                    {props.type === 'income' ? 'un nuevo ingreso' : 'una nueva factura'} o presiona <b> Control+i</b>\n                </div>}\n                type=\"info\"\n                showIcon\n                icon={<AlertTwoTone/>}\n            />\n        </Col>\n        <Col span={24}>\n            <Alert\n                message=\"Atención\"\n                description=\"Este sistema no guarda ningúna informacion, asegurate de exportar tus datos!\"\n                type=\"warning\"\n                showIcon\n                icon={<WarningTwoTone twoToneColor=\"#ebd027\"/>}\n            />\n        </Col>\n        <Col span={24}>\n            <Alert message={<div>Las facturas se autocompletan con información de <a\n                href=\"https://ruc.volpe.com.py\">ruc.volpe.com.py</a></div>} type=\"info\"/>\n        </Col>\n    </Row>\n}\n","export function formatMoney(value: any, symbol?: string, decimalDigits?: number) {\n    if (!value && value !== 0) return '';\n    if (typeof value === 'string' && value.startsWith('Gs')) return value;\n\n    const amount = decimalDigits ? value : Math.round(value);\n    const formattedAmount = new Intl.NumberFormat('it', {\n        minimumFractionDigits: decimalDigits || 0,\n        maximumFractionDigits: decimalDigits || 0\n    }).format(amount);\n    const prefix = symbol !== undefined ? `${symbol} ` : '';\n    return `${prefix}${formattedAmount}`;\n}\n\nexport function parseMoney(value?: string): number {\n    if (!value) return 0;\n    if (typeof value === 'number') return value;\n    if (typeof value !== 'string') return 0;\n\n    return Number(value\n        .trim()\n        .replace(/\\s/g, '')\n        .replace(/\\./g, '')\n        .replace(/,/g, '.')\n    )\n\n}\n","export const IncomeOriginDocumentType = {\n    ruc: \"RUC\",\n    document: \"CÉDULA DE IDENTIDAD\",\n    other: \"OTROS\"\n}\n\nexport const IncomeType = {\n    salary: \"LIQUIDACIÓN DE SALARIO\",\n    summary: \"EXTRACTO DE CUENTA (Cuando no exista la obligación legal de expedir comprobante de venta)\",\n    other: \"OTROS DOCUMENTOS QUE RESPALDAN LOS INGRESOS (Cuando no exista la obligación legal de expedir comprobante de venta)\"\n}\n\n\nexport const ExpenseIdentifierType = {\n    ruc: \"RUC\",\n    document: 'CÉDULA DE IDENTIDAD',\n    passport: \"PASAPORTE\",\n    migrationDocument: 'CARNÉ DE MIGRACIÓN',\n    employerNumber: 'NÚMERO DE EMPLEADOR',\n    externalProviderIdentifier: 'IDENTIFICACIÓN TRIBUTARIA (PROVEEDORES DEL EXTERIOR)'\n}\n\nexport const ExpenseDocumentType = {\n    invoice: 'FACTURA',\n    voucher: 'BOLETA DE VENTA',\n    simpleVoucher: 'BOLETA RESIMPLE',\n    selfInvoice: 'AUTOFACTURA',\n    publicEventTicket: 'ENTRADA A ESPECTÁCULOS PÚBLICOS',\n    publicTransportTicket: 'BOLETO DE TRANSPORTE PÚBLICO',\n    publicIncomeTicket: 'COMPROBANTE DE INGRESO O RECIBO DE ENTIDAD PÚBLICA, RELIGIOSAS O DE BENEFICIO PÚBLICO',\n    airTicket: 'TICKET DE TRANSPORTE AÉREO',\n    cashierMachineTicket: 'TICKET DE MÁQUINA REGISTRADORA',\n    debitNote: 'NOTA DE DÉBITO RECIBIDA',\n    salary: 'LIQUIDACIÓN DE SALARIO',\n    ips: 'EXTRACTO DE CUENTA IPS',\n    cardSummary: 'EXTRACTO DE TARJETA DE CRÉDITO/TARJETA DE DÉBITO',\n    transfer: 'TRANSFERENCIAS O GIROS BANCARIOS/ BOLETA DE DEPÓSITO',\n    externalTicket: 'COMPROBANTE DEL EXTERIOR LEGALIZADO',\n    importTicket: 'DESPACHO DE IMPORTACIÓN',\n    other: \"OTROS COMPROBANTES DE VENTA QUE RESPALDEN EGRESOS (Cuando no exista obligación legal de expedir comprobantes de ventas)\"\n}\n\nexport const PaymentType = {\n    cash: \"CONTADO\",\n    credit: \"CRÉDITO\",\n    na: \"NO APLICA\"\n}\n","import {Async, NRWrapper} from '../Model';\nimport {Button, Col, Form, Input, InputNumber, Radio, Row, Select} from 'antd';\nimport React, {useEffect, useRef, useState} from 'react';\nimport {Store} from 'rc-field-form/lib/interface';\nimport {GlobalHotKeys} from 'react-hotkeys';\nimport {formatMoney, parseMoney} from '../utils/formatters';\nimport MaskedInput from 'antd-mask-input/build/main/lib/MaskedInput';\nimport {PersonWithLetterhead} from '../set/SETService';\nimport {ExpenseDocumentType} from \"../set/V2Enums\";\n\nexport interface ExpenseFormProps {\n    expense?: ExpenseFormData,\n    owner: Async<PersonWithLetterhead>\n    onNewRuc: (ruc: string) => void;\n    onSubmit: (data: ExpenseFormData) => void;\n    onCancel: () => void;\n    editType: 'NEW' | 'EDIT';\n}\n\nexport interface ExpenseFormData {\n    owner: PersonWithLetterhead;\n    date: string;\n    letterhead?: string;\n    expenseNumber?: string;\n    type: keyof typeof ExpenseDocumentType;\n    amount: number;\n    isCredit: boolean;\n}\n\nexport function ExpenseForm({\n                                expense,\n                                owner,\n                                onNewRuc,\n                                onSubmit,\n                                onCancel,\n                                editType\n                            }: ExpenseFormProps) {\n\n    const finalOwner = NRWrapper.of(owner).orElse({\n        doc: '',\n        name: '',\n        div: ''\n    });\n\n    const [rucQuery, setRucQuery] = useState('');\n    const [form] = Form.useForm();\n    const refDate = useRef<MaskedInput>(null);\n    const refQuery = useRef<Input>(null);\n\n    function onRucInput(key: string) {\n        if (key === 'Enter') {\n            onNewRuc(rucQuery.trim());\n        }\n    }\n\n    useEffect(() => {\n        if (!expense) return;\n        form.setFieldsValue(expense);\n        if (refQuery.current) refQuery.current.setValue(expense.owner.doc);\n    }, [form, expense]);\n\n    const newLetterHead = NRWrapper.of(owner).map(o => o.letterhead).orElse('');\n    useEffect(() => {\n        form.setFields([{\n            name: 'letterhead',\n            value: newLetterHead\n        }])\n\n    }, [newLetterHead, form]);\n\n    function doIt(data: Store) {\n        onSubmit({\n            ...expense,\n            amount: Number(data.amount),\n            date: data.date,\n            letterhead: data.letterhead,\n            expenseNumber: data.expenseNumber,\n            owner: finalOwner,\n            type: data.type,\n            isCredit: data.isCredit\n        });\n        if (refDate.current) refDate.current.focus();\n        if (refQuery.current) refQuery.current.setValue('');\n        setRucQuery('');\n    }\n\n\n    return <GlobalHotKeys\n        keyMap={{\n            SAVE_EXPENSE: [\"Control+g\"]\n        }}\n        handlers={{\n            SAVE_EXPENSE: form.submit\n        }}>\n        <Row gutter={16} style={{padding: 8}}>\n            <Col span={24}>\n                <h1>{editType === 'EDIT' ? 'Editando' : 'Creando'}</h1>\n            </Col>\n            <Col span={24}>\n                <Form layout=\"vertical\" form={form} onFinish={doIt} wrapperCol={{span: 24}}>\n\n                    <Form.Item label=\"Fecha\" name=\"date\" rules={[{required: true}]}>\n                        <MaskedInput mask=\"11/11/11\"\n                                     ref={refDate}\n                                     autoFocus\n                                     placeholder=\"DD/MM/YY (si es salario, poner cualquier día del mes)\"\n                                     defaultValue={expense?.date}/>\n                    </Form.Item>\n\n                    <Form.Item label=\"Tipo egreso\" name=\"type\">\n                        <Select options={getAvailableTypes()}\n                                placeholder=\"Tipo de egreso\"\n                                showSearch\n                        />\n                    </Form.Item>\n\n                    <Form.Item label=\"Buscar por RUC\">\n                        <Input placeholder=\"4787587, Arturo Volpe, ASISMED\"\n                               onKeyDown={evt => onRucInput(evt.key)}\n                               ref={refQuery}\n                               defaultValue={expense?.owner.doc}\n                               onBlur={evt => {\n                                   setRucQuery(evt.target.value);\n                                   onNewRuc(evt.target.value);\n                               }}\n                               onChange={evt => setRucQuery(evt.target.value)}\n                        />\n                        <Row>\n                            <Col>Nombre: {finalOwner.name}</Col>\n                            <Col>RUC: {finalOwner.doc}-{finalOwner.div}</Col>\n                        </Row>\n                    </Form.Item>\n\n                    <Form.Item shouldUpdate={(prevValues, curValues) => prevValues.type !== curValues.type}>\n                        {data => {\n                            const type = data.getFieldValue(\"type\") || [];\n                            if (\n                                type[0] === \"5\" && type[1] === 'gasto' && type[2] === 'DESCJBPN'\n                            ) return null\n                            return <>\n                                <Form.Item name=\"letterhead\"\n                                           label=\"Timbrado\"\n                                           rules={[{required: true}]}>\n                                    <MaskedInput mask=\"11111111\"\n                                                 defaultValue={expense?.letterhead}\n                                                 placeholder=\"12345678\"/>\n                                </Form.Item>\n\n                                <Form.Item label=\"Nro Factura\" name=\"expenseNumber\" rules={[{required: true}]}>\n                                    <MaskedInput mask=\"111-111-1111111\"\n                                                 defaultValue={expense?.expenseNumber}\n                                                 placeholder=\"001-002-1234567\"/>\n                                </Form.Item>\n\n                                <Form.Item label=\"Crédito\" name=\"isCredit\">\n                                    <Radio.Group defaultValue={expense?.isCredit}>\n                                        <Radio.Button value={true}>CRÉDITO</Radio.Button>\n                                        <Radio.Button value={false}>CONTADO</Radio.Button>\n                                    </Radio.Group>\n                                </Form.Item>\n                            </>\n                        }}\n                    </Form.Item>\n\n                    <Form.Item label=\"Monto\" name=\"amount\" rules={[{required: true}]}>\n                        <InputNumber defaultValue={expense?.amount}\n                                     style={{width: '100%'}}\n                                     formatter={formatMoney}\n                                     parser={parseMoney}\n                        />\n                    </Form.Item>\n\n\n                    <pre hidden>{JSON.stringify(expense?.type, null, 2)}</pre>\n\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\" style={{width: '50%'}}>Guardar (Control+g)</Button>\n                        <Button type=\"default\" onClick={onCancel} style={{width: '50%'}}>Cancelar</Button>\n                    </Form.Item>\n\n                </Form>\n            </Col>\n        </Row>\n    </GlobalHotKeys>;\n}\n\nfunction getAvailableTypes() {\n    const types = ExpenseDocumentType as Record<string, string>;\n    return Object.keys(types).map((k: any) => ({\n        value: k,\n        label: types[k]\n    }));\n}\n","export interface Person {\n    doc: string;\n    name: string;\n    div: string;\n    old?: string;\n}\n\nexport type QueryResult = Person[];\n\nexport function query(searchTerm: string): Promise<QueryResult> {\n\n    const final = searchTerm.replace(\" +\", \"+\");\n\n    return fetch(`https://sapi.volpe.com.py/find?query=${final}`)\n        .then(result => result.json());\n\n}\n","export default class DigitGenerator {\n\n    getDigitoVerificadorBase11(ruc: string) {\n        return this.getDigitoVerificador(ruc, 11);\n    }\n\n    getDigitoVerificador(ruc: string, base: number) {\n\n        let k = 2;\n        let total = 0;\n        let valueOfZero = \"0\".charCodeAt(0);\n\n        let alRevez = DigitGenerator.invertirCadena(DigitGenerator.eliminarNoDigitos(ruc));\n\n        for (let i = 0; i < alRevez.length; i++) {\n            let numero = alRevez.charCodeAt(i);\n            total += (numero - valueOfZero) * k++;\n            if (k > base) k = 2;\n        }\n\n        let resto = total % base;\n\n        if (resto > 1) return base - resto;\n        else return 0;\n    }\n\n    private static invertirCadena(cadena: string) {\n        return cadena.split(\"\").reverse().join(\"\");\n    }\n\n    private static eliminarNoDigitos(ruc: string) {\n        let toRet = \"\";\n        for (let i = 0; i < ruc.length; i++) {\n            // si no es caracter, lo converitmos a su valor numérico\n            if (isNaN(parseInt(ruc[i], 10))) {\n                toRet += ruc.charCodeAt(i);\n            } else {\n                toRet += ruc[i];\n            }\n        }\n        return toRet;\n    }\n}\n","import {ExpenseFormData} from '../components/ExpenseForm';\nimport {Person, query as QueryRuc} from '../RucAPI';\nimport {PersonType} from './ParametroEgreso';\nimport moment from 'moment';\nimport DigitGenerator from './DigitGenerator';\nimport {findLast} from 'lodash';\nimport {IncomeFormData} from '../components/IncomeForm';\nimport {Expense, Income} from \"./Model\";\n\nexport interface PersonWithLetterhead extends Person {\n    letterhead?: string;\n}\n\nexport class SETService {\n\n    lastInvoiceId: number;\n    lastIncomeId: number;\n\n    constructor(private period: number,\n                private owner: Person,\n                private type: PersonType,\n                private invoices: Expense[] = [],\n                private incomes: Income[] = []) {\n        this.lastInvoiceId = invoices.reduce((pv, cv) => {\n            return pv < cv.id ? cv.id : pv\n        }, 0);\n        this.lastIncomeId = incomes.reduce((pv, cv) => {\n            return pv < cv.id ? cv.id : pv\n        }, 0);\n    }\n\n    mapToForm(source: Expense): ExpenseFormData {\n        return {\n            amount: source.amount,\n            owner: {\n                doc: source.identifier,\n                name: source.name,\n                div: new DigitGenerator().getDigitoVerificadorBase11(source.identifier) + \"\",\n                old: '',\n                letterhead: source.letterhead\n            },\n            type: source.type,\n            expenseNumber: source.voucher,\n            letterhead: source.letterhead,\n            date: SETService.storageToFormDate(source.date),\n            isCredit: source.paymentType === 'credit'\n        }\n    }\n\n    mapIngresoToForm(source: Income): IncomeFormData {\n        return {\n            amount: source.amount,\n            owner: {\n                doc: source.identifier,\n                name: source.name,\n                div: '',\n                old: '',\n                letterhead: ''\n            },\n            type: source.type,\n            incomeNumber: source.voucher,\n            letterhead: source.letterhead,\n            date: source.date,\n            isCredit: source.paymentType === 'credit'\n        };\n    }\n\n    mapInvoice(source: ExpenseFormData, id?: number): Expense {\n\n        return {\n            date: SETService.dateToStorageFormat(source.date),\n            id: id || ++this.lastInvoiceId,\n            paymentType: source.isCredit ? 'credit' : 'cash',\n            voucher: source.expenseNumber,\n            letterhead: source.letterhead,\n            type: source.type,\n            identifier: source.owner.doc,\n            amount: source.amount,\n            name: source.owner.name,\n            irpAmount: 0,\n            identifierType: 'ruc',\n            version: 2\n        };\n    }\n\n    mapIncome(source: IncomeFormData, id?: number): Income {\n\n        return {\n            id: id || ++this.lastIncomeId,\n            letterhead: source.letterhead,\n            paymentType: source.isCredit ? 'credit' : 'cash',\n            date: SETService.dateToStorageFormat(source.date),\n            voucher: source.incomeNumber,\n            type: source.type,\n            name: source.owner.name,\n            identifier: source.owner.doc,\n            amount: source.amount,\n            irpAmount: 0,\n            identifierType: 'ruc',\n            version: 2\n        }\n    }\n\n    public async findRuc(query: string): Promise<PersonWithLetterhead> {\n\n        let toRet: {\n            identifier: string;\n            letterhead?: string;\n            name: string;\n        } | undefined = findLast(this.invoices, f => query === f.identifier);\n\n        if (!toRet) {\n            toRet = findLast(this.incomes, f => query === f.identifier);\n            if (toRet)\n                toRet.letterhead = '';\n        }\n\n        if (toRet) {\n            return {\n                doc: toRet.identifier,\n                old: '',\n                div: new DigitGenerator().getDigitoVerificadorBase11(toRet.identifier) + \"\",\n                letterhead: toRet.letterhead,\n                name: toRet.name\n            }\n        }\n\n        const fromApi = await QueryRuc(query);\n        if (!fromApi || !fromApi.length) {\n            return {\n                letterhead: '',\n                name: '',\n                div: '',\n                old: '',\n                doc: ''\n            }\n        }\n        if (!isNaN(Number(query))) {\n            const found = fromApi.find(f => f.doc === query);\n            if (found) {\n                return {\n                    ...found,\n                    letterhead: ''\n                }\n            }\n        }\n        return {\n            ...fromApi[0],\n            letterhead: ''\n        }\n    }\n\n    private static mapDateToSetFormat(source: string) {\n        return moment(source, \"DD/MM/YY\").format(\"YYYY-MM-DD\")\n    }\n\n    /**\n     * Converts a date to the storage format\n     */\n    private static dateToStorageFormat(source: string) {\n        if (source.length === 10) {\n            // it doesn't like a short date\n            if (source === moment(source, \"YYYY/MM/DD\").format(\"YYYY/MM/DD\")) {\n                // it's already a long date\n                return source;\n            }\n            throw new Error(\"Invalid short date: \" + source);\n        }\n        return moment(source, \"DD/MM/YY\").format(\"YYYY/MM/DD\")\n    }\n\n    public static mapDateFromSetFormat(source: string) {\n        return moment(source, \"YYYY-MM-DD\").format(\"DD/MM/YY\")\n    }\n\n    public static mapSETFormatToMoment(source: string): moment.Moment {\n        return moment(source, \"YYYY-MM-DD\");\n    }\n\n    public static mapMomentToSETFormat(source: moment.Moment): string {\n        return source.format('YYYY-MM-DD');\n    }\n\n    public static mapSETFormatToSetMonth(source: string) {\n        return moment(source, \"YYYY-MM-DD\").month() + 1;\n    }\n\n    public static mapMonthToLocalFormat(source: string, period: string) {\n        return SETService.mapMomentToSETFormat(moment(\"1990-01-01\")\n            .month(parseInt(source) - 1)\n            .year(parseInt(period)));\n    }\n\n    static mapLocalToMoment(date: string) {\n        return moment(date, \"YYYY/MM/DD\");\n    }\n\n    static storageToFormDate(date: string) {\n        return SETService.mapLocalToMoment(date).format(\"DD/MM/YY\");\n    }\n}\n","/**\n * Our hook see https://dev.to/gabe_ragland/debouncing-with-react-hooks-jci\n */\nimport {useEffect, useState} from 'react';\n\nexport function useDebounce(value: string, delay: number) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Set debouncedValue to value (passed in) after the specified delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Return a cleanup function that will be called every time ...\n            // ... useEffect is re-called. useEffect will only be re-called ...\n            // ... if value changes (see the inputs array below).\n            // This is how we prevent debouncedValue from changing if value is ...\n            // ... changed within the delay period. Timeout gets cleared and restarted.\n            // To put it in context, if the user is typing within our app's ...\n            // ... search box, we don't want the debouncedValue to update until ...\n            // ... they've stopped typing for more than 500ms.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        // Only re-call effect if value changes\n        // You could also add the \"delay\" var to inputs array if you ...\n        // ... need to be able to change that dynamically.\n        [value, delay]\n    );\n\n    return debouncedValue;\n}\n","import moment from 'moment';\nimport {Expense, Income} from \"./Model\";\nimport {SETService} from \"./SETService\";\nimport {IncomeType, ExpenseDocumentType} from './V2Enums';\n\ntype Filtrable = Pick<Income, 'identifier' | 'name' | 'date' | 'voucher'> & { type: keyof typeof IncomeType | keyof typeof ExpenseDocumentType};\n\nconst SPECIAL_KEYS: string[] = ['type'];\n\nexport class SETListManipulatorService {\n\n    private filter<T extends Filtrable>(data: Array<T>, query: string | undefined, from: moment.Moment, to: moment.Moment): T[] {\n        const toSearch = (query || '');\n        const typeToSearch = this.getTypeToSearch(toSearch);\n        const fullText = this.cleanSearch(toSearch);\n        console.log({fullText, typeToSearch});\n        return data.filter(tf => {\n            let valid = true;\n            if (fullText)\n                valid = tf.name.toLowerCase().includes(fullText)\n                    || tf.identifier.toLowerCase().includes(fullText)\n                    || (tf.voucher || '').toLowerCase().includes(fullText);\n            if (typeToSearch) {\n                // we need to translate it\n                // TODO make this cast pretty\n                const inSpanish = ExpenseDocumentType[tf.type as keyof typeof ExpenseDocumentType] || IncomeType[tf.type as keyof typeof IncomeType];\n                valid = valid && (inSpanish).toLowerCase().includes(typeToSearch);\n            }\n            if (valid) {\n                valid = SETService.mapLocalToMoment(tf.date).isBetween(from, to, undefined, \"[]\");\n            }\n            return valid\n        })\n    }\n    getTypeToSearch(toSearch: string): string | undefined {\n        // TODO implement other types of search\n        // keep a space to simplify the code at the end\n        let query = toSearch.toLowerCase().trim() + ' ';\n        const keyword = 'type:';\n        if (query.includes(keyword)) {\n            const idx = query.indexOf(keyword) + keyword.length;\n            return query.substring(idx, query.indexOf(' ', idx));\n        }\n        return undefined;\n    }\n\n    cleanSearch(toSearch: string) {\n\n        // keep a space to simplify the code at the end\n        let cleaned = toSearch.toLowerCase().trim() + ' ';\n\n        for (const key of SPECIAL_KEYS) {\n            const toClean = `${key}:`;\n            if (cleaned.includes(toClean)) {\n                const idx = cleaned.indexOf(toClean);\n                console.log(`before removing '${toClean}': '${cleaned}'`);\n                cleaned =\n                    cleaned.substring(0, idx).trim() + // before\n                    cleaned.substring(cleaned.indexOf(' ', idx)); // after\n                console.log('cleaned: ' + cleaned);\n            }\n        }\n\n        return cleaned.trim();\n    }\n\n    filterIncomes(data: Income[], query: string | undefined, from: moment.Moment, to: moment.Moment): Income[] {\n        return this.filter(data, query, from, to);\n    }\n\n    filterExpenses(data: Expense[], query: string | undefined, from: moment.Moment, to: moment.Moment): Expense[] {\n        return this.filter(data, query, from, to);\n    }\n}\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport {Button, Col, DatePicker, Input, message, Row, Table, Typography} from 'antd';\nimport {Async, NRHelper, NRWrapper} from '../Model';\nimport {Help} from '../components/Help';\nimport {Person} from '../RucAPI';\nimport {ExpenseForm, ExpenseFormData} from '../components/ExpenseForm';\nimport {formatMoney} from '../utils/formatters';\nimport {GlobalHotKeys} from 'react-hotkeys';\nimport {PersonWithLetterhead, SETService} from '../set/SETService';\nimport {useDebounce} from '../utils/Hooks';\nimport moment from 'moment';\nimport {SETListManipulatorService} from '../set/SETListManipulatorService';\nimport {sumBy} from 'lodash';\nimport {Expense} from \"../set/Model\";\nimport {PersonType} from \"../set/ParametroEgreso\";\nimport {ExpenseDocumentType, PaymentType} from \"../set/V2Enums\";\n\nexport const emptyOwner: Person = {old: '', div: '', name: '', doc: ''};\n\nconst defaultExpense: ExpenseFormData = {\n    date: '',\n    letterhead: '',\n    expenseNumber: '',\n    type: \"invoice\",\n    owner: emptyOwner,\n    amount: 0,\n    isCredit: false\n};\n\nexport function ExpenseListPage(props: {\n    data: Expense[];\n    onSave: (expense: ExpenseFormData, id?: number) => { wasNew: boolean };\n    doRemove: (expenseId: number) => void;\n    owner: Person;\n    type: PersonType;\n    period: number;\n}) {\n\n    const [current, setCurrent] = useState<ExpenseFormData>();\n    const [currentId, setCurrentId] = useState<number>();\n    const service = useMemo(() => new SETService(props.period, props.owner, props.type, props.data),\n        [props.data, props.period, props.type, props.owner]);\n\n    const [query, setQuery] = useState('');\n    const debouncedQuery = useDebounce(query, 500);\n    const [date, setDate] = useState<[moment.Moment, moment.Moment]>([\n        moment().year(props.period).startOf('year').startOf('day'),\n        moment().year(props.period).endOf('year').endOf('day'),\n    ]);\n    const [data, setData] = useState<Expense[]>(props.data);\n\n    useEffect(() => {\n        setData(new SETListManipulatorService().filterExpenses(props.data, debouncedQuery, date[0], date[1]))\n    }, [debouncedQuery, props.data, date]);\n\n    function onNewExpense() {\n        setCurrent(JSON.parse(JSON.stringify((defaultExpense))));\n        setCurrentId(undefined);\n    }\n\n    function onSave(d: ExpenseFormData) {\n        if (props.onSave(d, currentId).wasNew) {\n            message.info(`Factura ${d.expenseNumber} guardada`, 5);\n            onNewExpense();\n        } else {\n            message.info(\"Registro actualizado\", 5);\n            setCurrentId(undefined);\n            setCurrent(undefined);\n        }\n    }\n\n    function onEdit(d: Expense) {\n        setCurrentId(d.id);\n        setCurrent(service.mapToForm(d));\n    }\n\n    const keyMap = {\n        ADD_INVOICE: [\"Control+i\"],\n    };\n\n    return <GlobalHotKeys\n        keyMap={keyMap}\n        handlers={{\n            ADD_INVOICE: onNewExpense\n        }}>\n        <Row gutter={[8, 8]} style={{padding: 8}}>\n            <Col span={18}>\n                <Row gutter={[8, 8]} align=\"middle\">\n                    <Col span={2} style={{textAlign: 'right', fontWeight: 'bold'}} offset={1}>\n                        Búsqueda:\n                    </Col>\n                    <Col span={9}>\n                        <Input placeholder=\"Por ruc/nombre/nro factura\"\n                               value={query}\n                               onChange={t => setQuery(t.target.value)}/>\n                    </Col>\n                    <Col span={2} style={{textAlign: 'right', fontWeight: 'bold'}}>\n                        Rango:\n                    </Col>\n                    <Col span={9}>\n                        <DatePicker.RangePicker value={date}\n                                                style={{width: '100%'}}\n                                                allowClear={false}\n                                                ranges={{\n                                                    [new Date().getFullYear() - 2]: [\n                                                        moment().subtract(2, 'year').startOf('year'),\n                                                        moment().subtract(2, 'year').endOf('year'),\n                                                    ],\n                                                    [new Date().getFullYear() - 1]: [\n                                                        moment().subtract(1, 'year').startOf('year'),\n                                                        moment().subtract(1, 'year').endOf('year'),\n                                                    ],\n                                                    [new Date().getFullYear()]: [\n                                                        moment().startOf('year'),\n                                                        moment().endOf('year')\n                                                    ]\n                                                }}\n                                                onChange={values => {\n                                                    if (!values) return;\n                                                    setDate([\n                                                        values[0]!.startOf('day'),\n                                                        values[1]!.endOf('day')\n                                                    ]);\n                                                }}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <InvoiceTable invoices={data}\n                                  onRemove={r => props.doRemove(r.id)}\n                                  onEdit={onEdit}/>\n                </Row>\n            </Col>\n            <Col span={6} style={{border: '1px solid rgb(235, 237, 240)'}}>\n                {current\n                    ? <InvoiceEditor current={current}\n                                     service={service}\n                                     onCancel={() => setCurrent(undefined)}\n                                     editType={currentId ? 'EDIT' : 'NEW'}\n                                     onSave={onSave}/>\n                    : <Help onNewInvoice={onNewExpense} type=\"invoice\"/>\n                }\n            </Col>\n        </Row>\n    </GlobalHotKeys>\n}\n\nfunction InvoiceEditor(props: {\n    editType: 'NEW' | 'EDIT';\n    current: ExpenseFormData;\n    onSave: (n: ExpenseFormData) => void;\n    onCancel: () => void;\n    service: SETService\n}) {\n\n    const [owner, setOwner] = useState<Async<PersonWithLetterhead>>(NRHelper.loaded(props.current.owner));\n    const toEdit = props.current;\n\n    const onNewRuc = useCallback((ruc: string) => {\n        if (ruc === NRWrapper.of(owner).map(o => o?.doc).orElse('')) {\n            return;\n        }\n        props.service.findRuc(ruc)\n            .then(r => setOwner(NRHelper.loaded(r)))\n            .catch(e => NRHelper.error(e));\n    }, [owner, props.service]);\n\n    useEffect(() => {\n        if (toEdit.owner)\n            setOwner(NRHelper.loaded(toEdit.owner))\n\n    }, [toEdit]);\n\n\n    return <ExpenseForm owner={owner}\n                        editType={props.editType}\n                        onSubmit={ev => {\n                            setOwner(NRHelper.loaded(emptyOwner));\n                            props.onSave(ev);\n                        }}\n                        onCancel={props.onCancel}\n                        expense={props.current}\n                        onNewRuc={onNewRuc}/>;\n}\n\nfunction InvoiceTable(props: {\n    invoices: Expense[]\n    onEdit(row: Expense): void;\n    onRemove(row: Expense): void;\n}) {\n    return <Table<Expense>\n        dataSource={props.invoices}\n        size=\"small\"\n        pagination={{\n            pageSize: 10,\n            showTotal: (t, r) => `Mostrando ${r[0]} a ${r[1]} de ${t} registros.`\n        }}\n        rowKey=\"id\"\n        style={{width: '100%'}}\n        columns={[{\n            title: 'ID',\n            dataIndex: 'id',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.id - b.id,\n        }, {\n            title: 'Tipo',\n            dataIndex: 'type',\n            align: 'right',\n            render: (_, row) => <>\n                {ExpenseDocumentType[row.type]}\n                {row.paymentType && <><br/> <small>{PaymentType[row.paymentType]}</small></>}\n            </>,\n            sorter: (a, b) => `${ExpenseDocumentType[a.type]}`\n                .localeCompare(`${ExpenseDocumentType[b.type]}`),\n        }, {\n            title: 'Fecha',\n            dataIndex: 'date',\n            sorter: (a, b) => a.date.localeCompare(b.date),\n        }, {\n            title: 'Emisor',\n            dataIndex: 'identifier',\n            align: 'left',\n            sorter: (a, b) => a.name.localeCompare(b.name),\n            render: (_, row) => <>\n                {row.name} ({row.identifier})\n            </>\n        }, {\n            title: 'Factura',\n            dataIndex: 'voucher',\n            align: 'right',\n            render: (_, row) => <>\n                {row.voucher}\n                <br/><small>{row.letterhead}</small>\n            </>\n        }, {\n            title: 'Monto',\n            align: 'right',\n            dataIndex: 'amount',\n            render: (a: number) => formatMoney(a),\n            sorter: (a, b) => a.amount - b.amount,\n        }, {\n            title: 'Acciones', dataIndex: '', render: (_, row) => {\n                return <>\n                    <Button onClick={() => props.onEdit(row)}>Editar</Button>\n                    <Button type=\"danger\" onClick={() => props.onRemove(row)}>Eliminar</Button>\n                </>\n            }\n        }]}\n\n        summary={() => {\n            const sum = sumBy(props.invoices, 'amount');\n            return <tr>\n                <th colSpan={3}>Total (todas las filas)</th>\n                <td colSpan={2}/>\n                <td className=\"ant-table-cell\" style={{textAlign: 'right', padding: 8}}>\n                    <Typography.Text>{formatMoney(sum)}</Typography.Text>\n                </td>\n                <td/>\n            </tr>\n        }}\n    />\n\n}\n","import {Async, NRWrapper} from '../Model';\nimport {Button, Col, Form, Input, InputNumber, Radio, Row, Select} from 'antd';\nimport React, {useEffect, useRef, useState} from 'react';\nimport {Store} from 'rc-field-form/lib/interface';\nimport {GlobalHotKeys} from 'react-hotkeys';\nimport {formatMoney, parseMoney} from '../utils/formatters';\nimport MaskedInput from 'antd-mask-input/build/main/lib/MaskedInput';\nimport {PersonWithLetterhead} from '../set/SETService';\nimport {IncomeType} from \"../set/V2Enums\";\n\nexport interface IncomeFormProps {\n    income?: IncomeFormData,\n    owner: Async<PersonWithLetterhead>\n    onNewRuc: (ruc: string) => void;\n    onSubmit: (data: IncomeFormData) => void;\n    onCancel: () => void;\n    editType: 'NEW' | 'EDIT';\n}\n\nexport interface IncomeFormData {\n    owner: PersonWithLetterhead;\n    date: string;\n    letterhead?: string;\n    incomeNumber?: string;\n    type: keyof typeof IncomeType;\n    amount: number;\n    isCredit: boolean;\n}\n\n\nexport function IncomeForm({\n                               income,\n                               owner,\n                               onNewRuc,\n                               onSubmit,\n                               onCancel,\n                               editType\n                           }: IncomeFormProps) {\n\n    const finalOwner = NRWrapper.of(owner).orElse({\n        doc: '',\n        name: '',\n        div: ''\n    });\n\n    const [rucQuery, setRucQuery] = useState('');\n    const [form] = Form.useForm();\n    const refDate = useRef<MaskedInput>(null);\n    const refQuery = useRef<Input>(null);\n\n    function onRucInput(key: string) {\n        if (key === 'Enter') {\n            onNewRuc(rucQuery.trim());\n        }\n    }\n\n    useEffect(() => {\n        if (!income) return;\n        form.setFieldsValue(income);\n        if (refQuery.current) refQuery.current.setValue(income.owner.doc);\n    }, [form, income]);\n\n    const newLetterHead = NRWrapper.of(owner).map(o => o.letterhead).orElse('');\n    useEffect(() => {\n        form.setFields([{\n            name: 'letterhead',\n            value: newLetterHead\n        }])\n\n    }, [newLetterHead, form]);\n\n    function doIt(data: Store) {\n        onSubmit({\n            ...income,\n            amount: Number(data.amount),\n            date: data.date,\n            letterhead: data.letterhead,\n            incomeNumber: data.incomeNumber,\n            owner: finalOwner,\n            type: data.type,\n            isCredit: data.isCredit\n        });\n        if (refDate.current) refDate.current.focus();\n        if (refQuery.current) refQuery.current.setValue('');\n        setRucQuery('');\n    }\n\n\n    return <GlobalHotKeys\n        keyMap={{\n            SAVE_Income: [\"Control+g\"]\n        }}\n        handlers={{\n            SAVE_Income: form.submit\n        }}>\n        <Row gutter={16} style={{padding: 8}}>\n            <Col span={24}>\n                <h1>{editType === 'EDIT' ? 'Editando' : 'Nuevo ingreso'}</h1>\n            </Col>\n            <Col span={24}>\n                <Form layout=\"vertical\" form={form} onFinish={doIt} wrapperCol={{span: 24}}>\n\n                    <Form.Item label=\"Fecha\" name=\"date\" rules={[{required: true}]}>\n                        <MaskedInput mask=\"11/11/11\"\n                                     ref={refDate}\n                                     autoFocus\n                                     placeholder=\"DD/MM/YY (si es salario, poner cualquier día del mes)\"\n                                     defaultValue={income?.date}/>\n                    </Form.Item>\n\n                    <Form.Item label=\"Tipo ingreso\" name=\"type\">\n                        <Select options={getAvailableTypes()}\n                                placeholder=\"Tipo de egreso\"\n                                showSearch\n                        />\n                    </Form.Item>\n\n                    <Form.Item label=\"Buscar por RUC\">\n                        <Input placeholder=\"4787587, Arturo Volpe, ASISMED\"\n                               onKeyDown={evt => onRucInput(evt.key)}\n                               ref={refQuery}\n                               defaultValue={income?.owner.doc}\n                               onBlur={evt => {\n                                   setRucQuery(evt.target.value);\n                                   onNewRuc(evt.target.value);\n                               }}\n                               onChange={evt => setRucQuery(evt.target.value)}\n                        />\n                        <Row>\n                            <Col>Nombre: {finalOwner.name}</Col>\n                            <Col>RUC: {finalOwner.doc}-{finalOwner.div}</Col>\n                        </Row>\n                    </Form.Item>\n\n                    <Form.Item shouldUpdate={(prevValues, curValues) => prevValues.type !== curValues.type}>\n                        {data => {\n                            const type = data.getFieldValue(\"type\") || [];\n                            if (type[0] === \"5\") return null\n                            return <>\n                                <Form.Item name=\"letterhead\"\n                                           label=\"Timbrado\"\n                                           rules={[{required: true}]}>\n                                    <MaskedInput mask=\"11111111\"\n                                                 defaultValue={income?.letterhead}\n                                                 placeholder=\"12345678\"/>\n                                </Form.Item>\n\n                                <Form.Item label=\"Nro Factura\" name=\"incomeNumber\" rules={[{required: true}]}>\n                                    <MaskedInput mask=\"111-111-1111111\"\n                                                 defaultValue={income?.incomeNumber}\n                                                 placeholder=\"001-002-1234567\"/>\n                                </Form.Item>\n\n                                <Form.Item label=\"Crédito\" name=\"isCredit\">\n                                    <Radio.Group defaultValue={false}>\n                                        <Radio.Button value={true}>CRÉDITO</Radio.Button>\n                                        <Radio.Button value={false}>CONTADO</Radio.Button>\n                                    </Radio.Group>\n                                </Form.Item>\n                            </>\n                        }}\n                    </Form.Item>\n\n\n                    <Form.Item label=\"Monto\" name=\"amount\" rules={[{required: true}]}>\n                        <InputNumber defaultValue={income?.amount}\n                                     style={{width: '100%'}}\n                                     formatter={formatMoney}\n                                     parser={parseMoney}\n                        />\n                    </Form.Item>\n\n\n                    <pre hidden>{JSON.stringify(income?.type, null, 2)}</pre>\n\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\" style={{width: '50%'}}>Guardar (Control+g)</Button>\n                        <Button type=\"default\" onClick={onCancel} style={{width: '50%'}}>Cancelar</Button>\n                    </Form.Item>\n\n                </Form>\n            </Col>\n        </Row>\n    </GlobalHotKeys>;\n}\n\nfunction getAvailableTypes() {\n    const types = IncomeType as Record<string, string>;\n    return Object.keys(types).map((k: any) => ({\n        value: k,\n        label: types[k]\n    }));\n}\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport {Button, Col, DatePicker, Input, message, Row, Table, Typography} from 'antd';\nimport {Person} from '../RucAPI';\nimport {formatMoney} from '../utils/formatters';\nimport {PersonType} from '../set/ParametroEgreso';\nimport {useDebounce} from '../utils/Hooks';\nimport moment from 'moment';\nimport {SETListManipulatorService} from '../set/SETListManipulatorService';\nimport {sumBy} from 'lodash';\nimport {PersonWithLetterhead, SETService} from '../set/SETService';\nimport {Async, NRHelper, NRWrapper} from '../Model';\nimport {IncomeForm, IncomeFormData} from '../components/IncomeForm';\nimport {emptyOwner} from './ExpenseListPage';\nimport {Help} from '../components/Help';\nimport {Income} from \"../set/Model\";\nimport {IncomeType, PaymentType} from \"../set/V2Enums\";\n\nconst defaultIncome: IncomeFormData = {\n    date: '',\n    letterhead: '',\n    incomeNumber: '',\n    type: 'salary',\n    owner: emptyOwner,\n    amount: 0,\n    isCredit: false\n};\n\nexport function IncomeListPage(props: {\n    data: Income[];\n    onSave: (income: IncomeFormData, id?: number) => { wasNew: boolean };\n    doRemove: (incomeId: number) => void;\n    owner: Person;\n    type: PersonType;\n    period: number;\n}) {\n\n    const [current, setCurrent] = useState<IncomeFormData>();\n    const [currentId, setCurrentId] = useState<number>();\n    const [query, setQuery] = useState('');\n    const debouncedQuery = useDebounce(query, 500);\n    const [date, setDate] = useState<[moment.Moment, moment.Moment]>([\n        moment().year(props.period).startOf('year').startOf('day'),\n        moment().year(props.period).endOf('year').endOf('day'),\n    ]);\n    const [data, setData] = useState<Income[]>(props.data);\n    const service = useMemo(() => new SETService(props.period, props.owner, props.type, [], props.data),\n        [props.data, props.period, props.type, props.owner]);\n\n    useEffect(() => {\n        setData(new SETListManipulatorService().filterIncomes(props.data, debouncedQuery, date[0], date[1]))\n    }, [debouncedQuery, props.data, date]);\n\n\n    function onEdit(d: Income) {\n        setCurrentId(d.id);\n        setCurrent(service.mapIngresoToForm(d));\n    }\n\n    function onNewIncome(base?: IncomeFormData) {\n        console.log('new ', base || defaultIncome);\n        setCurrent(JSON.parse(JSON.stringify((base || defaultIncome))));\n        setCurrentId(undefined);\n    }\n\n    function onSave(d: IncomeFormData) {\n        if (props.onSave(d, currentId).wasNew) {\n            message.info(`Factura ${d.incomeNumber} guardada`, 5);\n            onNewIncome({...d, date: ''});\n        } else {\n            message.info(\"Income actualizado\", 5);\n            setCurrentId(undefined);\n            setCurrent(undefined);\n        }\n    }\n\n    return <Row gutter={[8, 8]} style={{padding: 8}}>\n        <Col span={18}>\n            <Row gutter={[8, 8]} align=\"middle\">\n                <Col span={2} style={{textAlign: 'right', fontWeight: 'bold'}} offset={1}>\n                    Búsqueda:\n                </Col>\n                <Col span={9}>\n                    <Input placeholder=\"Por ruc/nombre/nro factura\"\n                           value={query}\n                           onChange={t => setQuery(t.target.value)}/>\n                </Col>\n                <Col span={2} style={{textAlign: 'right', fontWeight: 'bold'}}>\n                    Rango:\n                </Col>\n                <Col span={9}>\n                    <DatePicker.RangePicker value={date}\n                                            style={{width: '100%'}}\n                                            allowClear={false}\n                                            ranges={{\n                                                [new Date().getFullYear() - 2]: [\n                                                    moment().subtract(2, 'year').startOf('year'),\n                                                    moment().subtract(2, 'year').endOf('year'),\n                                                ],\n                                                [new Date().getFullYear() - 1]: [\n                                                    moment().subtract(1, 'year').startOf('year'),\n                                                    moment().subtract(1, 'year').endOf('year'),\n                                                ],\n                                                [new Date().getFullYear()]: [\n                                                    moment().startOf('year'),\n                                                    moment().endOf('year')\n                                                ]\n                                            }}\n                                            onChange={values => {\n                                                if (!values) return;\n                                                setDate([\n                                                    values[0]!.startOf('day'),\n                                                    values[1]!.endOf('day')\n                                                ]);\n                                            }}\n                    />\n                </Col>\n            </Row>\n            <Row>\n                <IncomeTable incomes={data}\n                             onRemove={r => props.doRemove(r.id)}\n                             onEdit={onEdit}/>\n            </Row>\n        </Col>\n        <Col span={6} style={{border: '1px solid rgb(235, 237, 240)'}}>\n            {current\n                ? <IncomeEditor current={current}\n                                service={service}\n                                onCancel={() => setCurrent(undefined)}\n                                editType={currentId ? 'EDIT' : 'NEW'}\n                                onSave={onSave}/>\n                : <Help onNewInvoice={() => onNewIncome()} type=\"income\"/>\n            }\n        </Col>\n    </Row>\n}\n\n\nfunction IncomeTable(props: {\n    incomes: Income[]\n    onEdit(row: Income): void;\n    onRemove(row: Income): void;\n}) {\n    return <Table<Income>\n        dataSource={props.incomes}\n        size=\"small\"\n        pagination={{\n            pageSize: 10,\n        }}\n        rowKey=\"id\"\n        style={{width: '100%'}}\n        columns={[{\n            title: 'ID',\n            dataIndex: 'id',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.id - b.id,\n        }, {\n            title: 'Detalles',\n            dataIndex: 'type',\n            align: 'right',\n            render: (_, row) => <>\n                <span>{IncomeType[row.type]}</span>\n                {<><br/> <small>{PaymentType[row.paymentType]}</small></>}\n            </>,\n            sorter: (a, b) => IncomeType[a.type]\n                .localeCompare(IncomeType[b.type]),\n        }, {\n            title: 'Fecha',\n            dataIndex: 'date',\n            sorter: (a, b) => (a.date || '').localeCompare(b.date || ''),\n        }, {\n            title: 'Receptor',\n            dataIndex: 'identifier',\n            align: 'left',\n            render: (_, row) => <>\n                {row.name}\n                <br/>({row.identifier})\n            </>\n        }, {\n            title: 'Monto',\n            align: 'right',\n            dataIndex: 'amount',\n            render: (a: number) => formatMoney(a),\n            sorter: (a, b) => a.amount - b.amount,\n        }, {\n            title: 'Acciones', dataIndex: '', render: (_, row) => {\n                return <>\n                    <Button onClick={() => props.onEdit(row)}>Editar</Button>\n                    <Button type=\"danger\" onClick={() => props.onRemove(row)}>Eliminar</Button>\n                </>\n            }\n        }\n\n        ]}\n        summary={pageData => {\n            const sum = sumBy(props.incomes, 'amount');\n            return <tr>\n                <th colSpan={3}>Total (todas las filas)</th>\n                <td/>\n                <td className=\"ant-table-cell\" style={{textAlign: 'right', padding: 8}}>\n                    <Typography.Text>{formatMoney(sum)}</Typography.Text>\n                </td>\n                <td/>\n            </tr>\n        }}\n    />\n\n}\n\nfunction IncomeEditor(props: {\n    editType: 'NEW' | 'EDIT';\n    current: IncomeFormData;\n    onSave: (n: IncomeFormData) => void;\n    onCancel: () => void;\n    service: SETService\n}) {\n\n    const [owner, setOwner] = useState<Async<PersonWithLetterhead>>(NRHelper.loaded(props.current.owner));\n    const toEdit = props.current;\n\n    const onNewRuc = useCallback((ruc: string) => {\n        if (ruc === NRWrapper.of(owner).map(o => o?.doc).orElse('')) {\n            return;\n        }\n        props.service.findRuc(ruc)\n            .then(r => setOwner(NRHelper.loaded(r)))\n            .catch(e => NRHelper.error(e));\n    }, [owner, props.service]);\n\n    useEffect(() => {\n        if (toEdit.owner)\n            setOwner(NRHelper.loaded(toEdit.owner))\n\n    }, [toEdit]);\n\n\n    return <IncomeForm owner={owner}\n                       editType={props.editType}\n                       onSubmit={ev => {\n                           setOwner(NRHelper.loaded(emptyOwner));\n                           props.onSave(ev);\n                       }}\n                       onCancel={props.onCancel}\n                       income={props.current}\n                       onNewRuc={onNewRuc}/>;\n}\n","import React from 'react';\nimport {Descriptions} from 'antd';\nimport {User} from \"../set/Model\";\n\nexport function Informer(props: { informer: User }) {\n\n    return <Descriptions size=\"small\" column={3}>\n        <Descriptions.Item label=\"Nombre\">{props.informer.name}</Descriptions.Item>\n        <Descriptions.Item label=\"ID\">{props.informer.identifier}</Descriptions.Item>\n    </Descriptions>\n}\n","import {ArandukaExport, Egreso, Familiar, Identificacion, Informante, Ingreso, PresentationType} from './ArandukaModel';\nimport moment from 'moment';\nimport download from 'downloadjs';\nimport Papa from 'papaparse';\nimport {SETService} from './SETService';\nimport {User} from \"./Model\";\n\nexport class SETExporter {\n\n    downloadData(data: ArandukaExport, nameFormat: 'FULL' | 'SIMPLE') {\n\n        const fixed = this.fixDataTypes(data);\n        const type = 'json';\n        const now = moment().format('YYYYMMDDhhmm');\n        const period = nameFormat === 'FULL' ? `${data.identificacion.periodo}_` : '';\n        const pType = nameFormat === 'FULL' ? `${data.identificacion.tipoPresentacion}_` : '';\n        const name = `${data.informante.ruc}_${period}${pType}${now}.${type}`;\n        const ct = 'application/json';\n        download(new Blob([JSON.stringify(fixed, null, 2)]), name, ct);\n    }\n\n    downloadAll(userInfo: User, data: unknown) {\n\n        const type = 'json';\n        const now = moment().format('YYYYMMDDhhmm');\n        const name = `${userInfo.identifier}_${now}.${type}`;\n        const ct = 'application/json';\n        download(new Blob([JSON.stringify(data, null, 2)]), name, ct);\n\n    }\n\n    private fixDataTypes(data: ArandukaExport) {\n\n        const toRet: ArandukaExport = JSON.parse(JSON.stringify(data));\n\n        toRet.ingresos.forEach(i => {\n            i.ingresoMontoGravado = Number(i.ingresoMontoGravado);\n            i.ingresoMontoNoGravado = Number(i.ingresoMontoNoGravado);\n            i.ingresoMontoTotal = Number(i.ingresoMontoTotal);\n            if (i.fecha)\n                i.periodo = SETService.mapSETFormatToMoment(i.fecha).year() + '';\n\n            if (i.tipo === \"5\") {\n                i.mes = `${SETService.mapSETFormatToSetMonth(i.fecha)}`;\n                delete i.fecha;\n                delete i.timbradoDocumento;\n                delete i.timbradoCondicion;\n                delete i.timbradoNumero;\n            }\n        });\n\n        toRet.egresos.forEach(e => {\n            e.egresoMontoTotal = Number(e.egresoMontoTotal);\n\n            // Fix all expenses where of type 'gasto' instead of the correct kind\n            if (e.tipo === \"gasto\") {\n                e.tipo = \"1\"\n            }\n\n            e.periodo = SETService.mapSETFormatToMoment(e.fecha).year() + '';\n\n            if (\n                e.tipo === \"5\" && e.tipoEgreso === 'gasto' && e.subtipoEgreso === 'DESCJBPN'\n            ) {\n                e.mes = `${SETService.mapSETFormatToSetMonth(e.fecha)}`;\n                // delete e.fecha;\n                delete e.timbradoDocumento;\n                delete e.timbradoCondicion;\n                delete e.timbradoNumero;\n            }\n        });\n\n        return toRet;\n\n    }\n\n    downloadExcel(informer: User, identifier: string, toDownload: any[]) {\n        if (!Array.isArray(toDownload)) throw new Error('Invalid data to download');\n\n        const columns = new Set<string>([]);\n        if (toDownload.length > 0) {\n            Object.keys(toDownload[0]).forEach(k => columns.add(k));\n        }\n\n        const csv = Papa.unparse({\n            fields: Array.from(columns),\n            data: toDownload\n        });\n        console.log(csv);\n\n        const now = moment().format('YYYYMMDDhhmm');\n        const name = `${informer.identifier}_${identifier}_${now}.csv`;\n\n        download(new Blob([csv]), name, 'text/csv');\n    }\n\n    downloadPeriod(data: {\n        ingresos: Ingreso[];\n        familiares: Familiar[];\n        identificacion: Identificacion;\n        egresos: Egreso[];\n        informante: Informante\n    }, period: number, type: PresentationType) {\n\n        alert(\"TODO: Not implemented\")\n    }\n}\n\n","import React from 'react';\nimport {useLocalStorage} from '@rehooks/local-storage';\nimport {Button, Col, Row} from 'antd';\nimport {Expense, Income, User} from \"../set/Model\";\nimport {SETExporter} from \"../set/SETExporter\";\n\nexport function Exporter() {\n\n    const [informer] = useLocalStorage<User>('informante');\n    const [incomes] = useLocalStorage<Income[]>('ingresos', []);\n    const [expenses] = useLocalStorage<Expense[]>('egresos', []);\n\n    function downloadAll() {\n        new SETExporter().downloadAll(informer!, {informer, incomes, expenses});\n    }\n\n    function downloadIncomesExcel() {\n        new SETExporter().downloadExcel(informer!, 'ingresos', incomes!);\n    }\n\n    function downloadExpensesExcel() {\n        new SETExporter().downloadExcel(informer!, 'egresos', expenses!);\n    }\n\n    return <Row gutter={[8, 8]}>\n        <Col span={24}>\n            <div style={{textAlign: 'center'}}>\n                <small>\n                    Puedes exportar tus datos de varias maneras, dependiendo del uso\n                    que les daras.\n                </small>\n            </div>\n        </Col>\n\n        <table style={{width: '100%'}}>\n            <tbody>\n            <tr>\n                <td>\n                    <b>Completo</b>\n                    <br/>\n                    <small>Todos los datos almacenados, útil para guardar y continuar la sesión mas tarde</small>\n                </td>\n                <td style={{verticalAlign: 'bottom'}}>\n                    <Button onClick={downloadAll} style={{width: '100%'}}>Exportar</Button>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <b>Ingresos en excel</b>\n                    <br/>\n                    <small>Exportar todos los ingresos, en formato excel para su manipulación</small>\n                </td>\n                <td style={{verticalAlign: 'bottom'}}>\n                    <Button onClick={downloadIncomesExcel} style={{width: '100%'}}>Descargar 'ingresos.csv'</Button>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <b>Egresos en excel</b>\n                    <br/>\n                    <small>Exportar todos los egresos, en formato excel para su manipulación</small>\n                </td>\n                <td style={{verticalAlign: 'bottom'}}>\n                    <Button onClick={downloadExpensesExcel} style={{width: '100%'}}>Descargar 'egresos.csv'</Button>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n\n    </Row>\n}\n\n","import {ExpenseDocumentType, PaymentType} from '../set/V2Enums';\nimport moment from 'moment';\n\nexport interface ParseResult {\n    type: keyof typeof ExpenseDocumentType;\n    letterhead: number;\n    identifier: string;\n    ruc: string;\n    date: string;\n    condition: keyof typeof PaymentType;\n    total: number;\n}\n\n\nexport function parseClipboard(text: string): Partial<ParseResult> | undefined {\n\n    if (!text || text.length === 0) return undefined;\n\n    if (text.includes('www.muv-app.co')) return muvParser(text);\n\n    console.log(\"No template found, returning undefined\");\n    return undefined;\n}\n\n\nexport function muvParser(text: string): Partial<ParseResult> {\n\n    const letterHeadPattern = /Timbrado.*:\\s+(\\d+)/\n    const rucPattern = /RUC\\s*:\\s+(\\d+)-\\d/\n    const totalPattern = /Total a pagar: Gs. .*- Gs. (.*)\\n/\n    const datePattern = /Fecha: (.*)\\n/\n    const conditionPattern = /Condición de Venta: Contado\\((.*)\\) Crédito\\((.*)\\)\\s*\\n/\n    const identifierPattern = /Factura N°: (.*)\\n/\n\n    const letterHeadMatches = letterHeadPattern.exec(text);\n    const rucMatches = rucPattern.exec(text);\n    const totalMatches = totalPattern.exec(text);\n    const dateMatches = datePattern.exec(text);\n    const conditionMatches = conditionPattern.exec(text);\n    const identifierMatches = identifierPattern.exec(text);\n\n    console.log(dateMatches);\n\n    return {\n        type: 'invoice', //muv is always factura,\n        condition: extractConditionType(conditionMatches),\n        letterhead: letterHeadMatches ? parseInt(letterHeadMatches[1]) : undefined,\n        ruc: rucMatches ? rucMatches[1] : undefined,\n        total: totalMatches ? parseInt(totalMatches[1]\n            .replace(/\\./, '')\n            .replace(/\\s/, '')\n        ) : undefined,\n        date: dateMatches ? moment(dateMatches[1], \"DD-MM-YYYY\").format(\"YYYY/MM/DD\") : undefined,\n        identifier: identifierMatches ? identifierMatches[1] : undefined,\n    }\n}\n\nfunction extractConditionType(conditionMatches: RegExpExecArray | null): ParseResult[\"condition\"] | undefined {\n    if (!conditionMatches) return undefined;\n    return conditionMatches[1].trim() === 'X'\n        ? 'cash'\n        : 'credit';\n}\n","import React, {useState} from \"react\";\nimport {Button, Col, Row} from 'antd';\nimport {parseClipboard, ParseResult} from '../import_parsers/ClipboardParser';\n\nexport function ClipboardImporter(props: {\n    onNewParsed: (parsed: Partial<ParseResult>) => void\n}) {\n\n    const [parsed, setParsed] = useState<Partial<ParseResult>>()\n    const [raw, setRaw] = useState<string>('')\n\n    function doParse() {\n\n        const t = parseClipboard(raw);\n        setParsed(t);\n        if (t) props.onNewParsed(t);\n    }\n\n    return <Row gutter={[20, 20]}>\n        <Col span={24}>\n            <textarea style={{width: '100%'}} value={raw} onChange={e => setRaw(e.target.value)}/>\n        </Col>\n        <Col span={24}>\n            <Button onClick={doParse}>Parsear</Button>\n        </Col>\n        <Col span={24}>\n            <pre>\n                {JSON.stringify(parsed, null, 2)}\n            </pre>\n        </Col>\n    </Row>\n}\n","import {useLocalStorage} from '@rehooks/local-storage';\nimport {Expense, Income, User} from './set/Model';\nimport {useEffect, useMemo, useState} from 'react';\nimport {VersionMigrator} from './set/VersionMigrator';\nimport {Person} from './RucAPI';\nimport {ExpenseFormData} from './components/ExpenseForm';\nimport {SETService} from './set/SETService';\nimport {IncomeFormData} from './components/IncomeForm';\n\n\nconst vm = new VersionMigrator();\n\n/**\n * Handles all the state of the site, currently it can be only used one time (for the migration flag)\n */\nexport function useMiscoState() {\n\n    const [informer, setInformer, clearInformer] = useLocalStorage<User>('informante');\n    const [incomes, setIncomes, clearIncomes] = useLocalStorage<Income[]>('ingresos', []);\n    const [expenses, setExpenses, clearExpenses] = useLocalStorage<Expense[]>('egresos', []);\n    const [migration, setMigration] = useState<boolean>(true);\n\n\n    const owner: Person = useMemo(() => ({\n        doc: informer?.identifier || '',\n        old: '',\n        div: '',\n        name: informer?.name || ''\n    }), [informer]);\n\n    const period: number = new Date().getFullYear();\n\n    const service = useMemo(() => new SETService(period, owner, informer?.type || 'FISICO', expenses || [], incomes || []),\n        [period, owner, informer, expenses, incomes]);\n\n    // this effect will update all data\n    useEffect(() => {\n        // if we don't have data, then continue\n        if (!informer && (!incomes || incomes.length === 0) && (!expenses || expenses.length === 0)) {\n            setMigration(false);\n            return;\n        }\n\n        // if we have data, check\n        if (\n            (informer && !vm.needsMigration(informer))\n            && (incomes && !vm.anyNeedsMigration(incomes))\n            && (expenses && !vm.anyNeedsMigration(expenses))\n        ) {\n            setMigration(false);\n            return;\n        }\n\n        console.log(informer, incomes, expenses);\n        console.log(vm.needsMigration(informer), vm.anyNeedsMigration(incomes || []), vm.anyNeedsMigration(expenses || []));\n        setMigration(true);\n\n        setTimeout(() => {\n            const lInformer = informer;\n            const lIncomes = incomes;\n            const lExpenses = expenses;\n            setInformer(vm.migrateUser(lInformer));\n            if (lIncomes && vm.anyNeedsMigration(lIncomes)) setIncomes(lIncomes.map(vm.migrateIncome));\n            if (lExpenses && vm.anyNeedsMigration(lExpenses)) setExpenses(lExpenses.map(vm.migrateExpense));\n            setMigration(false);\n        });\n\n    }, [migration, informer, incomes, expenses, setIncomes, setInformer, setExpenses])\n\n    function saveExpense(expense: ExpenseFormData, id?: number): { wasNew: boolean } {\n        if (id) {\n            setExpenses((expenses || []).map(it => {\n                return it.id === id ? service.mapInvoice(expense, id) : it;\n            }));\n            return {wasNew: false};\n        } else {\n            // it's a new\n            setExpenses([...(expenses || []), service.mapInvoice(expense)]);\n            return {wasNew: true};\n        }\n    }\n\n    async function searchRuc(ruc: string) {\n        return service.findRuc(ruc)\n    }\n\n    function removeExpense(id: number) {\n        setExpenses((expenses || []).filter(it => it.id !== id));\n    }\n\n    function saveIncome(income: IncomeFormData, id?: number): { wasNew: boolean } {\n        if (id) {\n            setIncomes((incomes || []).map(it => {\n                return it.id === id ? service.mapIncome(income, id) : it;\n            }));\n            return {wasNew: false};\n        } else {\n            // it's a new\n            setIncomes([...(incomes || []), service.mapIncome(income, id)]);\n            return {wasNew: true};\n        }\n    }\n\n    function removeIncome(id: number) {\n        setIncomes((incomes || []).filter(it => it.id !== id));\n    }\n\n    function clearAllData() {\n        clearExpenses();\n        clearIncomes();\n        clearInformer();\n    }\n\n    return {\n        isMigrating: migration,\n\n        expenses: expenses || [],\n        saveExpense,\n        removeExpense,\n\n        saveIncome,\n        removeIncome,\n\n        incomes: incomes || [],\n        informer: informer,\n        clearAllData,\n        owner,\n        period,\n        searchRuc\n    }\n}\n","import {ArandukaExport, Egreso, Informante, Ingreso} from \"./ArandukaModel\";\nimport {Expense, FullData, Income, User} from \"./Model\";\nimport {SETService} from \"./SETService\";\n\n\n/**\n * This class can map any version of the data to the latest one used\n * in the system.\n */\nexport class VersionMigrator {\n\n    public migrate(base: ArandukaExport): FullData {\n\n        return {\n            version: 2,\n            user: this.migrateUser(base.informante),\n            expenses: base.egresos.map(this.migrateExpense),\n            incomes: base.ingresos.map(this.migrateIncome)\n        }\n    }\n\n    needsMigration(param: any): boolean {\n        return !param || !param.version || param.version !== 2;\n    }\n\n    anyNeedsMigration(param: any[]): boolean {\n        return !param\n            || !!param.find(p => this.needsMigration(p));\n    }\n\n    public migrateUser(base: Informante | User | undefined | null | string): User {\n        if (base === null || base === undefined || typeof base === 'string') return {\n            version: 2,\n            identifier: '0-0',\n            name: 'EMPY',\n            type: 'FISICO'\n        };\n        if ('version' in base) return base;\n        return {\n            version: 2,\n            identifier: base.ruc,\n            name: base.nombre,\n            type: \"FISICO\",\n            older: {\n                v1: base\n            }\n        }\n    }\n\n    public migrateIncome(base: Ingreso | Income): Income {\n        if ('version' in base) return base;\n        return {\n            version: 2,\n            id: base.id,\n            amount: base.ingresoMontoTotal,\n            date: SETService.mapDateFromSetFormat(base.fecha),\n            identifier: base.relacionadoNumeroIdentificacion,\n            identifierType: 'ruc',\n            irpAmount: 0,\n            name: base.relacionadoNombres,\n            type: \"salary\",\n            voucher: base.timbradoDocumento,\n            paymentType: base.tipoIngreso === \"credito\" ? 'credit' : 'cash',\n            letterhead: base.timbradoNumero,\n\n            older: {\n                v1: base\n            }\n        };\n    }\n\n    public migrateExpense(base: Egreso | Expense): Expense {\n        if ('version' in base) return base;\n        return {\n            version: 2,\n            id: base.id,\n            amount: base.egresoMontoTotal,\n            date: SETService.mapDateFromSetFormat(base.fecha),\n            identifier: base.relacionadoNumeroIdentificacion,\n            identifierType: 'ruc',\n            letterhead: base.timbradoNumero,\n            name: base.relacionadoNombres,\n            voucher: base.timbradoDocumento,\n            irpAmount: 0,\n            type: 'invoice', // TODO improve mapping\n            paymentType: base.timbradoCondicion === 'contado' ? 'cash' : 'credit',\n\n            older: {\n                v1: base\n            }\n        }\n    }\n\n}\n","import React, {useState} from 'react';\nimport {Button, Drawer, message, Modal, PageHeader, Result, Tabs} from 'antd';\nimport {ExpenseListPage} from './ExpenseListPage';\nimport {IncomeListPage} from './IncomeListPage';\nimport {Informer} from '../components/Informer';\nimport {Exporter} from './Exporter';\nimport {ClipboardImporter} from './ClipboardImporter';\nimport {ParseResult} from '../import_parsers/ClipboardParser';\nimport {useMiscoState} from '../misco';\nimport {ExpenseFormData} from '../components/ExpenseForm';\nimport {Person} from '../RucAPI';\n\n\nexport function Dashboard() {\n\n\n    const state = useMiscoState();\n    const [clipboardImporter, setClipboardImporter] = useState<boolean>(true);\n    const [showExporter, setShowExporter] = useState(false);\n\n\n    function logout() {\n        Modal.warning({\n            title: 'Cerrar sesión',\n            content: 'Esta seguro de que desea cerrar sesión? Todos los datos no guardados se perderan',\n            cancelText: 'Volver',\n            okCancel: true,\n            okText: 'Sí, cerrar y borrar datos',\n            okType: 'danger',\n            onOk: () => {\n                state.clearAllData();\n                message.warning('Todos los datos han sido borrados', 10);\n            }\n        })\n    }\n\n    function saveImportedInvoice(data: Partial<ParseResult>) {\n        if (!data.ruc) return;\n        state.searchRuc(data.ruc)\n            .then(d => {\n                state.saveExpense(mapToExpense(data, d))\n                message.info(`Factura ${data.identifier} de ${d.name} importada`);\n                setClipboardImporter(false);\n            })\n            .catch(e => {\n                message.warning(`No se encuentra el ruc ${data.ruc}`);\n            })\n    }\n\n    if (state.isMigrating) {\n        return <Result title=\"Cargando\">\n            Migrando datos a versión actual, por favor espere...\n        </Result>\n    }\n\n    return <>\n        <PageHeader ghost={false}\n                    style={{border: '1px solid rgb(235, 237, 240)'}}\n                    title=\"MISCO\"\n                    subTitle=\"Sistema suplementario para Aranduka\"\n                    extra={[\n                        <Button key=\"import\" onClick={() => setClipboardImporter(true)}>Importar</Button>,\n                        <Button key=\"export\" onClick={() => setShowExporter(true)}>Exportar</Button>,\n                        <Button key=\"clear\" type=\"danger\" onClick={logout}>Cerrar sesión</Button>\n                    ]}\n                    footer={<Tabs defaultActiveKey=\"1\">\n                        <Tabs.TabPane tab=\"Egresos\" key=\"1\">\n                            <ExpenseListPage data={state.expenses}\n                                             onSave={state.saveExpense}\n                                             doRemove={state.removeExpense}\n                                             type={state.informer?.type || 'FISICO'}\n                                             owner={state.owner}\n                                             period={state.period}\n                            />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Ingresos\" key=\"2\">\n                            <IncomeListPage data={state.incomes}\n                                            onSave={state.saveIncome}\n                                            doRemove={state.removeIncome}\n                                            type={state.informer?.type || 'FISICO'}\n                                            owner={state.owner}\n                                            period={state.period}\n                            />\n                        </Tabs.TabPane>\n                    </Tabs>}\n        > {state.informer && <Informer informer={state.informer}/>} </PageHeader>\n        <Drawer\n            title=\"Exportar datos\"\n            width={720}\n            onClose={() => setShowExporter(false)}\n            visible={showExporter}\n            bodyStyle={{paddingBottom: 80}}\n            footer={<div style={{textAlign: 'right'}}>\n                <Button onClick={() => setShowExporter(false)} style={{marginRight: 8}}> Volver </Button>\n            </div>}>\n            <Exporter/>\n        </Drawer>\n        <ClipboardImporterModal visible={clipboardImporter}\n                                onOk={saveImportedInvoice}\n                                onCancel={() => setClipboardImporter(false)}/>\n    </>\n}\n\nfunction ClipboardImporterModal(props: { visible: boolean, onCancel: () => void, onOk: (v: Partial<ParseResult>) => void }) {\n    const [parsed, setParsed] = useState<Partial<ParseResult>>()\n\n    return <Modal visible={props.visible} okText=\"Importar\"\n                  onCancel={() => props.onCancel()}\n                  okButtonProps={{disabled: !parsed}}\n                  onOk={() => parsed && props.onOk(parsed)}\n    >\n        <ClipboardImporter onNewParsed={p => setParsed(p)}/>\n    </Modal>\n}\n\nfunction mapToExpense(p: Partial<ParseResult>, owner: Person): ExpenseFormData {\n    return {\n        date: p.date!,\n        type: p.type!,\n        amount: p.total!,\n        letterhead: p.letterhead + \"\",\n        expenseNumber: p.identifier!,\n        isCredit: p.condition !== 'cash',\n        owner: owner\n    };\n}\n","import {writeStorage} from '@rehooks/local-storage';\nimport {ArandukaExport, Ingreso} from './ArandukaModel';\nimport moment from 'moment';\nimport {SETService} from './SETService';\nimport {Income} from \"./Model\";\n\nexport class SETImporter {\n\n    doImport(data: ArandukaExport) {\n\n        // check for v2 format\n        const dat: any = data;\n\n        if ('informer' in dat) {\n            // it's v2 data\n            writeStorage('informante', dat.informer);\n            writeStorage('ingresos', dat.incomes);\n            writeStorage('egresos', dat.expenses);\n            return;\n        }\n\n        writeStorage('informante', data.informante);\n        writeStorage('ingresos', this.fixIncomes(data.ingresos));\n        writeStorage('egresos', data.egresos);\n        writeStorage('identificacion', data.identificacion);\n        writeStorage('familiares', data.familiares);\n    }\n\n    private fixIncomes(ingresos: Array<Ingreso| Income>): Ingreso[] {\n        if (!ingresos || ingresos.length === 0) return [];\n\n        return ingresos.map(ingreso => {\n            if ('version' in ingreso) {\n                // it's an income, skip it\n                return ingreso as any; // this is an invalid cast but we need it\n            }\n            let newFecha = ingreso.fecha;\n            if (!newFecha) {\n                if (ingreso.mes) {\n                    newFecha = SETService.mapMomentToSETFormat(moment(\"1990-01-01\")\n                        .month(parseInt(ingreso.mes) - 1)\n                        .year(parseInt(ingreso.periodo)));\n                } else {\n                    throw new Error(`Ingreso inválido, verificar ${ingreso.id} con fecha ${ingreso.fecha} mes ${ingreso.mes}`);\n                }\n            }\n            return {\n                ...ingreso,\n                fecha: newFecha\n            }\n        });\n    }\n}\n","import React, {useState} from 'react';\nimport {Alert, Button, Col, Form, Input, message, Modal, PageHeader, Radio, Row, Timeline, Upload} from 'antd';\nimport {UploadOutlined} from '@ant-design/icons';\nimport {RcFile} from 'antd/es/upload';\nimport {SETImporter} from '../set/SETImporter';\nimport {User} from \"../set/Model\";\nimport {writeStorage} from \"@rehooks/local-storage\";\nimport DigitGenerator from \"../set/DigitGenerator\";\n\nfunction doProcess(file: RcFile) {\n    return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsText(file, 'UTF-8');\n        reader.onload = () => {\n            const data = (JSON.parse(reader.result as string));\n            new SETImporter().doImport(data);\n            resolve();\n        };\n    });\n}\n\nasync function fromScratch(user: User) {\n    // TODO move to a logic file\n    writeStorage('informante', user);\n    writeStorage('ingresos', []);\n    writeStorage('egresos', []);\n}\n\nexport function Onboarding() {\n\n    const [modalVisible, setModalVisible] = useState<boolean>(false);\n\n\n    return <PageHeader ghost={false}\n                       style={{border: '1px solid rgb(235, 237, 240)'}}\n                       title=\"MISCO\"\n                       subTitle=\"Sistema suplementario para Aranduka\"\n                       extra={[]}>\n        <Row gutter={[16, 16]} style={{margin: 16}}>\n            <Col span={24}>\n                <Alert message=\" Para usar el sistema debes importar datos del Aranduka \" type=\"warning\"/>\n            </Col>\n            <Col span={24}>\n\n                <Timeline>\n                    <Timeline.Item>\n                        Descarga e instala Aranduka\n                    </Timeline.Item>\n                    <Timeline.Item>\n                        Inicia sesión y completa tus tados\n                    </Timeline.Item>\n                    <Timeline.Item>\n                        Puedes cargar unas egresos e ingresos\n                    </Timeline.Item>\n                    <Timeline.Item>\n                        Exporta tus datos\n                    </Timeline.Item>\n                    <Timeline.Item>\n                        Descomprime el archivo, y luego subí el archivo que termina en <b>detalle.json</b>.\n                        <br/>\n                        <br/>\n                        <Upload beforeUpload={file => {\n                            doProcess(file);\n                            return false;\n                        }}>\n                            <Button>\n                                <UploadOutlined/> Click para subir archivo\n                            </Button>\n                        </Upload>\n                        <br/>\n                        <small>También puedes utilizar el archivo que genera este sistema.</small>\n                    </Timeline.Item>\n                </Timeline>\n            </Col>\n            <Col span={24}>\n                <Button onClick={() => setModalVisible(true)} type=\"primary\">\n                    También puedes empezar desde 0 apretando este botón\n                </Button>\n            </Col>\n\n        </Row>\n        <FromScratchModal visible={modalVisible}\n                          onCancel={() => setModalVisible(false)}\n                          onAccept={fromScratch}/>\n\n\n    </PageHeader>\n}\n\nfunction addVerifier(document: string): string {\n    if (document.indexOf('-') >= 0) return document;\n    return `${document}-${new DigitGenerator().getDigitoVerificadorBase11(document)}`\n}\n\nfunction FromScratchModal(props: {\n    visible: boolean;\n    onCancel: () => void;\n    onAccept: (u: User) => Promise<void>;\n}) {\n    const [form] = Form.useForm();\n    const [working, setWorking] = useState<boolean>(false);\n    const layout = {\n        labelCol: {span: 8},\n        wrapperCol: {span: 16},\n    };\n\n    return <Modal visible={props.visible}\n                  title=\"Empezar desde 0\"\n                  okText=\"Aceptar\"\n                  cancelText=\"Cancelar\"\n                  onCancel={props.onCancel}\n                  onOk={() => {\n                      message.loading({key: \"scratch\", message: \"Guardando\"});\n                      setWorking(true);\n                      form.validateFields()\n                          .then(values => {\n                              return props.onAccept({\n                                  identifier: addVerifier(values.identifier),\n                                  name: `${values.name}`.toUpperCase(),\n                                  type: values.type,\n                                  version: 2\n                              });\n                          })\n                          .then(() => {\n                              form.resetFields();\n                              message.success({key: \"scratch\", message: \"Bienvenido\"})\n                          })\n                          .catch(info => {\n                              console.warn(info);\n                              message.warning({key: \"scratch\", message: \"Error al validar campos\"});\n                          })\n                          .finally(() => setWorking(false))\n                      ;\n                  }}\n    >\n        <Form form={form}\n              {...layout}\n              layout=\"horizontal\"\n              name=\"form_in_modal\"\n              initialValues={{type: \"FISICO\"}}\n        >\n            <Form.Item name=\"identifier\" label=\"Documento\"\n                       rules={[{required: true, message: 'Ingrese su documento'}]}>\n                <Input disabled={working}/>\n            </Form.Item>\n            <Form.Item name=\"name\" label=\"Nombre\"\n                       rules={[{required: true, message: 'Ingrese su nombre'}]}>\n                <Input disabled={working}/>\n            </Form.Item>\n            <Form.Item name=\"type\" label=\"Tipo\">\n                <Radio.Group disabled={working} defaultValue=\"FISICO\">\n                    <Radio value=\"FISICO\">Físico</Radio>\n                    <Radio value=\"SOCIEDAD_SIMPLE\">Sociedad simple</Radio>\n                </Radio.Group>\n            </Form.Item>\n        </Form>\n    </Modal>\n}\n","import React from 'react';\nimport {useLocalStorage} from '@rehooks/local-storage';\nimport {Informante} from '../set/ArandukaModel';\nimport {Dashboard} from './Dashboard';\nimport {Onboarding} from './Onboarding';\n\nexport function MainPage() {\n\n    const [informer] = useLocalStorage<Informante>('informante');\n\n    return informer ? <Dashboard/> : <Onboarding/>\n}\n","import React from 'react';\nimport './App.css';\nimport {MainPage} from './pages/MainPage';\nimport {configure} from 'react-hotkeys';\n\nconfigure({\n    logLevel: 'warn',\n\n});\nconst App: React.FC = () => {\n    return <MainPage/>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}